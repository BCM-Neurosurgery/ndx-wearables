name: Run all tests on conda
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    types:
      - opened
    branches:
      - main
  workflow_dispatch:

jobs:
  run-all-tests-on-conda:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash -l {0}  # needed for conda environment to work
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.name }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: conda-linux-python3.8-minimum    , requirements: minimum    , python-ver: "3.8" , os: ubuntu-latest }
          - { name: conda-linux-python3.8            , requirements: pinned     , python-ver: "3.8" , os: ubuntu-latest }
          - { name: conda-linux-python3.9            , requirements: pinned     , python-ver: "3.9" , os: ubuntu-latest }
          - { name: conda-linux-python3.10           , requirements: pinned     , python-ver: "3.10", os: ubuntu-latest }
          - { name: conda-linux-python3.11           , requirements: pinned     , python-ver: "3.11", os: ubuntu-latest }
          - { name: conda-linux-python3.12           , requirements: pinned     , python-ver: "3.12", os: ubuntu-latest }
          - { name: conda-linux-python3.12-upgraded  , requirements: upgraded   , python-ver: "3.12", os: ubuntu-latest }
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # tags are required to determine the version

      - name: Set up Conda
        uses: BCM-Neurosurgery/setup-miniconda@main
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: true
          python-version: ${{ matrix.python-ver }}

      - name: Install build dependencies
        run: |
          conda config --set always_yes yes --set changeps1 no
          conda info
          conda config --show-sources
          conda list --show-channel-urls

      - name: Install run requirements (minimum)
        if: ${{ matrix.requirements == 'minimum' }}
        run: |
          python -m pip install -r requirements-min.txt -r requirements-dev.txt
          python -m pip install .

      - name: Install run requirements (pinned)
        if: ${{ matrix.requirements == 'pinned' }}
        run: |
          python -m pip install -r requirements-dev.txt
          python -m pip install .

      - name: Install run requirements (upgraded)
        if: ${{ matrix.requirements == 'upgraded' }}
        run: |
          python -m pip install -r requirements-dev.txt
          # force upgrade of all dependencies to latest versions within allowed range
          python -m pip install -U --upgrade-strategy eager .

      - name: Build extension YAML (if needed)
        run: |
          if [ -f create_extension.py ]; then
            python create_extension.py
          else
            echo "No create_extension.py found, skipping manual build step"
          fi

      - name: Run tests
        run: |
          pytest -v

      - name: Build wheel and source distribution
        run: |
          python -m pip install --upgrade build
          python -m build
          ls -1 dist

      - name: Test installation from a wheel (POSIX)
        run: |
          python -m venv test-wheel-env
          source test-wheel-env/bin/activate
          python -m pip install dist/*-none-any.whl
          python -c "import ndx_wearables"
